package plugin

import (
	"bytes"
	"text/template"

	"github.com/gogo/protobuf/proto"
	"github.com/gogo/protobuf/protoc-gen-gogo/generator"
	"github.com/gogo/protobuf/vanity"
	"github.com/iov-one/weave/proto"
)

type plugin struct {
	*generator.Generator
	generator.PluginImports
	fmtPkg        generator.Single
	protoPkg      generator.Single
	weavePkg      generator.Single
	useGogoImport bool
}

func NewPlugin(useGogoImport bool) generator.Plugin {
	return &plugin{useGogoImport: useGogoImport}
}

func (p *plugin) Name() string {
	return "handlers"
}

func (p *plugin) Init(g *generator.Generator) {
	p.Generator = g
}

// ProtoFile reprpesents a parsed proto file
type ProtoFile struct {
	PackageName string
	Namespace   string
	Messages    []*ProtoMessage
}

// ProtoMessage represents a parsed message in a proto file
type ProtoMessage struct {
	Name   string
	State  string
	Bucket string
}

// for i, tc := range cases {
// 	t.Run(fmt.Sprintf("case-%d", i), func(t *testing.T) {
// 		ctx, auth := newContextWithAuth(tc.signers...)
// 		 d := NewDecorator(auth)
// 		stack := helpers.Wrap(d, h)
// 		 _, err := stack.Check(ctx, db, tc.tx)
// 		if tc.err != nil {
// 			require.EqualError(t, err, tc.err.Error())
// 		} else {
// 			require.NoError(t, err)
// 			assert.Equal(t, tc.perms, h.Perms)
// 		}
// 		 _, err = stack.Deliver(ctx, db, tc.tx)
// 		if tc.err != nil {
// 			require.EqualError(t, err, tc.err.Error())
// 		} else {
// 			require.NoError(t, err)
// 			assert.Equal(t, tc.perms, h.Perms)
// 		}
// 	})
// }

func (p *plugin) Generate(file *generator.FileDescriptor) {
	if !p.useGogoImport {
		vanity.TurnOffGogoImport(file.FileDescriptorProto)
	}
	p.PluginImports = generator.NewPluginImports(p.Generator)
	p.fmtPkg = p.NewImport("fmt")
	p.weavePkg = p.NewImport("github.com/iov-one/weave")

	for _, msg := range file.Messages() {
		if msg.DescriptorProto.GetOptions().GetMapEntry() {
			continue
		}

		if msg.DescriptorProto.Options != nil {
			e1, err := proto.GetExtension(msg.DescriptorProto.Options, weave.E_State)
			if err == nil && e1.(*string) != nil {
				continue
			}

			e2, err := proto.GetExtension(msg.DescriptorProto.Options, weave.E_Buckets)
			if err == nil && e2.(*string) != nil {
				continue
			}

			if e1 != nil && e2 != nil {
				// msg := msg.GetName()
				// state := e1.(*string)
				p.P("func Test" + msg.GetName() + "Handler(t *testing.T) {")
				p.P("for i, tc := range cases {")
				p.P("t.Run(fmt.Sprintf(\"case-%d\", i), func(t *testing.T) {"
				p.P("ctx, auth := newContextWithAuth(tc.signers...)")
		 		p.P("d := NewDecorator(auth)")
				p.P("stack := helpers.Wrap(d, h)")
		 		p.P("_, err := stack.Check(ctx, db, tc.tx)")
				p.P("if tc.err != nil {")
				p.P("require.EqualError(t, err, tc.err.Error())")
				p.P("} else {")
				p.P("require.NoError(t, err)")
				p.P("assert.Equal(t, tc.perms, h.Perms)")
				p.P("}")
		 		p.P("_, err = stack.Deliver(ctx, db, tc.tx)")
				p.P("if tc.err != nil {")
				p.P("require.EqualError(t, err, tc.err.Error())")
				p.P("} else {")
				p.P("require.NoError(t, err)")
				p.P("assert.Equal(t, tc.perms, h.Perms)")
				p.P("}")
				p.P("})")
				p.P("}")	
				p.P("}")
			}
		}
	}
}

func generate(pkg *ProtoFile, templateVar string) string {
	t := template.New("stub")
	t, _ = t.Parse(templateVar)

	var doc bytes.Buffer
	t.Execute(&doc, pkg)
	s := doc.String()

	return s
}
